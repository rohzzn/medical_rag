services:
  # PostgreSQL database for user data and conversation history
  postgres:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-app}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "6543:5432"  # No conflict - this is good
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Neo4j database for knowledge graph
  neo4j:
    build:
      context: .
      dockerfile: Dockerfile.neo4j
    ports:
      - "7476:7474"  # Changed to avoid conflict
      - "7689:7687"  # Changed to avoid conflict
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - ./neo4j_dump:/import/neo4j_dump
      - neo4j_plugins:/plugins
    environment:
      - NEO4J_AUTH=neo4j/password26
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_server_memory_heap_initial__size=2G
      - NEO4J_server_memory_heap_max__size=4G
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*,gds.*
      - NEO4JLABS_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_server_default__listen__address=0.0.0.0
      - NEO4J_server_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_security_auth__enabled=true
      - NEO4J_dbms_databases_default__to__read__only=false
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 10s
      timeout: 10s
      retries: 20
      start_period: 30s
    restart: unless-stopped
    # Custom command to load data before starting Neo4j
    command: >
      bash -c '
        echo "*** Starting Neo4j with data loading ***"
        DUMP_FILE="/import/neo4j_dump/neo4j.dump"
        if [ -f "$DUMP_FILE" ]; then
          echo "Found neo4j.dump file"
          
          # Set the initial password before loading anything
          neo4j-admin dbms set-initial-password "password26" || echo "Password may already be set"
          
          # Load the dump file if database doesn't exist already
          if [ ! -d "/data/databases/neo4j" ] || [ -z "$(ls -A /data/databases/neo4j)" ]; then
            echo "Loading dump file..."
            neo4j-admin database load neo4j --from-path="/import/neo4j_dump" --overwrite-destination=true || {
              echo "Error loading dump file"
              ls -la /import/neo4j_dump/
            }
            echo "Creating vector indexes..."
            # Start Neo4j temporarily to create indexes
            neo4j start
            sleep 15
            cypher-shell -u neo4j -p password26 "CREATE VECTOR INDEX text_embeddings IF NOT EXISTS FOR (c:Chunk) ON (c.embedding) OPTIONS {indexConfig: {`vector.dimensions`: 1536, `vector.similarity_function`: \"cosine\"}};"
            cypher-shell -u neo4j -p password26 "CREATE FULLTEXT INDEX text_embeddings2 IF NOT EXISTS FOR (c:Chunk) ON EACH [c.text];"
            neo4j stop
            sleep 5
          else
            echo "Database already exists, skipping dump loading"
          fi
        else
          echo "WARNING: neo4j.dump file not found at $DUMP_FILE"
          ls -la /import/
          echo "Starting with empty database."
        fi
        
        # Start Neo4j
        echo "Starting Neo4j..."
        exec neo4j console
      '

  # FastAPI backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/app
      - /app/venv  # Exclude the virtual environment directory
      - ./.env:/app/.env  # Mount the root .env file directly into the container
    environment:
      # Critical: NEO4J_URI must point to internal Docker service name
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password26
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MODEL=${LLM_MODEL:-gpt-4o}
      - SECRET_KEY=${SECRET_KEY:-supersecretkey}
      # CORS origins - as a JSON array for Pydantic
      - BACKEND_CORS_ORIGINS=["http://localhost:3002", "http://127.0.0.1:3002", "https://doc-ai.rarediseasesnetwork.org"]
    ports:
      - "8002:8000"  # Using 8002 to match your existing nginx_cegir.conf
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    
  # Next.js frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3002}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET:-nextauth-secret-key}
      # This is the critical part - use the external port that backend is mapped to
      - NEXT_PUBLIC_API_URL=http://localhost:8002/api/v1
      # For server-side API calls - internal Docker network
      - SERVER_API_URL=http://backend:8000/api/v1
    ports:
      - "3002:3000"  # Using 3002 to match your existing nginx_cegir.conf
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    command: sh -c "cd /app && npm install && npm run dev"
    extra_hosts:
      - "host.docker.internal:host-gateway"

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
  neo4j_data:
  neo4j_logs:
  neo4j_plugins: